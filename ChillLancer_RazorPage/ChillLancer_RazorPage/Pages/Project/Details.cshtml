@page "{id:Guid}"
@model ChillLancer_RazorPage.Pages.Project.DetailsModel
@{
    ViewData["Title"] = "Project Details";
}
<link rel="stylesheet" href="/css/proposals.css" />

<div class="section container bg-primary">
    <div class="project-header">
        <h2>@Model.Project.Title</h2>
        <ul class="nav-tabs">
            <li><a asp-page="Details">Details</a></li>
            <li class="active"><a href="/Project/Proposals?id=@Model.Project.Id">Proposals</a></li>
        </ul>
    </div>
    <div class ="project-details-container">
        <div class="project-details">
            <h4>Project details</h4>
            <ul class="nav-tabs">
                <li>Project budget: $@Model.Project.Budget.ToString("0.##")</li>
            </ul>
            <p>@Model.Project.Description</p>
        </div>
        <div class="about-the-client">
            <h4>About the client</h4>
            <ul>
                <li>@Model.Employer.FullName</li>
                <li>@Model.Employer.National</li>
                <li>@Model.Employer.Email</li>
                <li>@Model.Employer.PhoneNumber</li>
            </ul>
        </div>
        <div class="project-details">
            <h4>Place a bid on this project</h4>
            <form method="post" class="form-container">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group">
                    <span class="text-danger">*</span>
                    <label asp-for="Proposal.Title" class="control-label"></label>
                    <input asp-for="Proposal.Title" class="form-control" />
                    <span asp-validation-for="Proposal.Title" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <span class="text-danger">*</span>
                    <label asp-for="Proposal.Description" class="control-label"></label>
                    <textarea asp-for="Proposal.Description" class="form-control"></textarea>
                    <span asp-validation-for="Proposal.Description" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <span class="text-danger">*</span>
                    <label asp-for="Proposal.Price" class="control-label"></label>
                    <span class="input-group-text">$</span>
                    <input type="number" asp-for="Proposal.Price" class="form-control" />
                    <span asp-validation-for="Proposal.Price" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <span class="text-danger">*</span>
                    <label asp-for="Proposal.HourDuration" class="control-label"></label>
                    <input type="number" asp-for="Proposal.HourDuration" class="form-control" />
                    <span asp-validation-for="Proposal.HourDuration" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <span class="text-danger">*</span>
                    <label asp-for="Proposal.DeliveryTime" class="control-label"></label>
                    <input type="number" asp-for="Proposal.DeliveryTime" class="form-control" />
                    <span asp-validation-for="Proposal.DeliveryTime" class="text-danger"></span>
                </div>
                <h3>Request milestone payments </h3>
                <p>Suggesting a milestone schedule for your client can make the project run smoothly by clearly outlining what needs to be done and when. </p>
                <div class="proposal-milestones" id="milestones-container">

                </div>
                <button type="button" id="add-milestone" class="btn btn-secondary">Add Milestone</button>
                <div class="form-group">
                    <input type="submit" value="Place bid" class="btn btn-primary" />
                </div>
            </form>
            <div id="milestone-error" class="text-danger"></div>
            @if (!ViewData.ModelState.IsValid)
            {
                <div class="text-danger">
                    @Html.ValidationSummary(false, "", new { @class = "alert alert-danger" })
                </div>
            }
        </div>
    </div>
</div>

<style>
    body{
        background-color: #fcfcfd;
    }
    .bg-primary {
        background-color: #fcfcfd !important; /* Custom orange */
    }
</style>
<script>
    document.getElementById('add-milestone').addEventListener('click', function() {
        let container = document.getElementById('milestones-container');
        let index = container.children.length;

        let milestoneHtml = `
            <div class="milestone-item">
                <label>Task Name</label>
                <input type="text" name="Proposal.Processes[${index}].TaskName" class="form-control" required>

                <label>Task Description</label>
                <input type="text" name="Proposal.Processes[${index}].TaskDescription" class="form-control">

                <label>Start Date</label>
                <input type="date" name="Proposal.Processes[${index}].StartDate" class="form-control">

                <label>End Date</label>
                <input type="date" name="Proposal.Processes[${index}].EndDate" class="form-control">

                <label>Cost</label>
                <input type="number" name="Proposal.Processes[${index}].Cost" class="form-control" required>
            </div>
        `;

        container.insertAdjacentHTML('beforeend', milestoneHtml);
    });
</script>
<script>
    let proposalPrice = @Model.Proposal.Price;
    let milestones = [];

    function addMilestone() {
        let milestoneContainer = document.getElementById("milestone-container");
        let milestoneIndex = milestones.length;

        let newMilestone = document.createElement("div");
        newMilestone.classList.add("milestone-item");
        newMilestone.innerHTML = `
            <label>Milestone ${milestoneIndex + 1} Price ($)</label>
            <input type="number" class="form-control milestone-price"
                   oninput="validateMilestones()" min="0">
        `;

        milestoneContainer.appendChild(newMilestone);
        milestones.push(0); // Initialize with 0
    }

    function validateMilestones() {
        let milestoneInputs = document.querySelectorAll(".milestone-price");
        let totalMilestoneCost = 0;

        milestoneInputs.forEach((input, index) => {
            let cost = parseFloat(input.value) || 0;
            milestones[index] = cost;
            totalMilestoneCost += cost;
        });

        let remainingBalance = proposalPrice - totalMilestoneCost;
        let errorDiv = document.getElementById("milestone-error");

        if (remainingBalance < 0) {
            errorDiv.textContent = "Total milestone cost exceeds proposal price!";
            errorDiv.classList.add("alert", "alert-danger");
        } else {
            errorDiv.textContent = "";
            errorDiv.classList.remove("alert", "alert-danger");
        }
    }
</script>

